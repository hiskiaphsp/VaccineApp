//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VaccineApp.MyServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="user", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class user : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> created_atField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string rolesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> created_at {
            get {
                return this.created_atField;
            }
            set {
                if ((this.created_atField.Equals(value) != true)) {
                    this.created_atField = value;
                    this.RaisePropertyChanged("created_at");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string roles {
            get {
                return this.rolesField;
            }
            set {
                if ((object.ReferenceEquals(this.rolesField, value) != true)) {
                    this.rolesField = value;
                    this.RaisePropertyChanged("roles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="hospital", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class hospital : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string countryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string hospital_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string phone_numberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string provinceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string country {
            get {
                return this.countryField;
            }
            set {
                if ((object.ReferenceEquals(this.countryField, value) != true)) {
                    this.countryField = value;
                    this.RaisePropertyChanged("country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hospital_name {
            get {
                return this.hospital_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.hospital_nameField, value) != true)) {
                    this.hospital_nameField = value;
                    this.RaisePropertyChanged("hospital_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string phone_number {
            get {
                return this.phone_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.phone_numberField, value) != true)) {
                    this.phone_numberField = value;
                    this.RaisePropertyChanged("phone_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string province {
            get {
                return this.provinceField;
            }
            set {
                if ((object.ReferenceEquals(this.provinceField, value) != true)) {
                    this.provinceField = value;
                    this.RaisePropertyChanged("province");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="vaccine", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class vaccine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string doseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> dose_countField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string vaccine_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string vaccine_typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dose {
            get {
                return this.doseField;
            }
            set {
                if ((object.ReferenceEquals(this.doseField, value) != true)) {
                    this.doseField = value;
                    this.RaisePropertyChanged("dose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> dose_count {
            get {
                return this.dose_countField;
            }
            set {
                if ((this.dose_countField.Equals(value) != true)) {
                    this.dose_countField = value;
                    this.RaisePropertyChanged("dose_count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vaccine_name {
            get {
                return this.vaccine_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.vaccine_nameField, value) != true)) {
                    this.vaccine_nameField = value;
                    this.RaisePropertyChanged("vaccine_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vaccine_type {
            get {
                return this.vaccine_typeField;
            }
            set {
                if ((object.ReferenceEquals(this.vaccine_typeField, value) != true)) {
                    this.vaccine_typeField = value;
                    this.RaisePropertyChanged("vaccine_type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="community", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class community : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string countryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> date_of_birthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nikField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string phone_numberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string provinceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string country {
            get {
                return this.countryField;
            }
            set {
                if ((object.ReferenceEquals(this.countryField, value) != true)) {
                    this.countryField = value;
                    this.RaisePropertyChanged("country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> date_of_birth {
            get {
                return this.date_of_birthField;
            }
            set {
                if ((this.date_of_birthField.Equals(value) != true)) {
                    this.date_of_birthField = value;
                    this.RaisePropertyChanged("date_of_birth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nik {
            get {
                return this.nikField;
            }
            set {
                if ((object.ReferenceEquals(this.nikField, value) != true)) {
                    this.nikField = value;
                    this.RaisePropertyChanged("nik");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string phone_number {
            get {
                return this.phone_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.phone_numberField, value) != true)) {
                    this.phone_numberField = value;
                    this.RaisePropertyChanged("phone_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string province {
            get {
                return this.provinceField;
            }
            set {
                if ((object.ReferenceEquals(this.provinceField, value) != true)) {
                    this.provinceField = value;
                    this.RaisePropertyChanged("province");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="vaccine_records", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class vaccine_records : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string administration_typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> community_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> dose_numberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> hospital_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nurse_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> vaccine_dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> vaccine_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string administration_type {
            get {
                return this.administration_typeField;
            }
            set {
                if ((object.ReferenceEquals(this.administration_typeField, value) != true)) {
                    this.administration_typeField = value;
                    this.RaisePropertyChanged("administration_type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> community_id {
            get {
                return this.community_idField;
            }
            set {
                if ((this.community_idField.Equals(value) != true)) {
                    this.community_idField = value;
                    this.RaisePropertyChanged("community_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> dose_number {
            get {
                return this.dose_numberField;
            }
            set {
                if ((this.dose_numberField.Equals(value) != true)) {
                    this.dose_numberField = value;
                    this.RaisePropertyChanged("dose_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> hospital_id {
            get {
                return this.hospital_idField;
            }
            set {
                if ((this.hospital_idField.Equals(value) != true)) {
                    this.hospital_idField = value;
                    this.RaisePropertyChanged("hospital_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nurse_name {
            get {
                return this.nurse_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nurse_nameField, value) != true)) {
                    this.nurse_nameField = value;
                    this.RaisePropertyChanged("nurse_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> vaccine_date {
            get {
                return this.vaccine_dateField;
            }
            set {
                if ((this.vaccine_dateField.Equals(value) != true)) {
                    this.vaccine_dateField = value;
                    this.RaisePropertyChanged("vaccine_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> vaccine_id {
            get {
                return this.vaccine_idField;
            }
            set {
                if ((this.vaccine_idField.Equals(value) != true)) {
                    this.vaccine_idField = value;
                    this.RaisePropertyChanged("vaccine_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="vaccine_producers", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class vaccine_producers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> producer_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> vaccine_idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> producer_id {
            get {
                return this.producer_idField;
            }
            set {
                if ((this.producer_idField.Equals(value) != true)) {
                    this.producer_idField = value;
                    this.RaisePropertyChanged("producer_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> vaccine_id {
            get {
                return this.vaccine_idField;
            }
            set {
                if ((this.vaccine_idField.Equals(value) != true)) {
                    this.vaccine_idField = value;
                    this.RaisePropertyChanged("vaccine_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="producer", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class producer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string countryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string phone_numberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string producer_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string provinceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string country {
            get {
                return this.countryField;
            }
            set {
                if ((object.ReferenceEquals(this.countryField, value) != true)) {
                    this.countryField = value;
                    this.RaisePropertyChanged("country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string phone_number {
            get {
                return this.phone_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.phone_numberField, value) != true)) {
                    this.phone_numberField = value;
                    this.RaisePropertyChanged("phone_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string producer_name {
            get {
                return this.producer_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.producer_nameField, value) != true)) {
                    this.producer_nameField = value;
                    this.RaisePropertyChanged("producer_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string province {
            get {
                return this.provinceField;
            }
            set {
                if ((object.ReferenceEquals(this.provinceField, value) != true)) {
                    this.provinceField = value;
                    this.RaisePropertyChanged("province");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        VaccineApp.MyServiceReference.user Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.user> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        VaccineApp.MyServiceReference.user[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.user[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserById", ReplyAction="http://tempuri.org/IService1/GetUserByIdResponse")]
        VaccineApp.MyServiceReference.user GetUserById(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserById", ReplyAction="http://tempuri.org/IService1/GetUserByIdResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.user> GetUserByIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        void AddUser(VaccineApp.MyServiceReference.user user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(VaccineApp.MyServiceReference.user user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        void UpdateUser(VaccineApp.MyServiceReference.user user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(VaccineApp.MyServiceReference.user user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        void DeleteUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHospitals", ReplyAction="http://tempuri.org/IService1/GetHospitalsResponse")]
        VaccineApp.MyServiceReference.hospital[] GetHospitals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHospitals", ReplyAction="http://tempuri.org/IService1/GetHospitalsResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.hospital[]> GetHospitalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHospitalById", ReplyAction="http://tempuri.org/IService1/GetHospitalByIdResponse")]
        VaccineApp.MyServiceReference.hospital GetHospitalById(int hospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHospitalById", ReplyAction="http://tempuri.org/IService1/GetHospitalByIdResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.hospital> GetHospitalByIdAsync(int hospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddHospital", ReplyAction="http://tempuri.org/IService1/AddHospitalResponse")]
        void AddHospital(VaccineApp.MyServiceReference.hospital hospital);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddHospital", ReplyAction="http://tempuri.org/IService1/AddHospitalResponse")]
        System.Threading.Tasks.Task AddHospitalAsync(VaccineApp.MyServiceReference.hospital hospital);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateHospital", ReplyAction="http://tempuri.org/IService1/UpdateHospitalResponse")]
        void UpdateHospital(VaccineApp.MyServiceReference.hospital hospital);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateHospital", ReplyAction="http://tempuri.org/IService1/UpdateHospitalResponse")]
        System.Threading.Tasks.Task UpdateHospitalAsync(VaccineApp.MyServiceReference.hospital hospital);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteHospital", ReplyAction="http://tempuri.org/IService1/DeleteHospitalResponse")]
        void DeleteHospital(int hospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteHospital", ReplyAction="http://tempuri.org/IService1/DeleteHospitalResponse")]
        System.Threading.Tasks.Task DeleteHospitalAsync(int hospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccines", ReplyAction="http://tempuri.org/IService1/GetVaccinesResponse")]
        VaccineApp.MyServiceReference.vaccine[] GetVaccines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccines", ReplyAction="http://tempuri.org/IService1/GetVaccinesResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine[]> GetVaccinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineById", ReplyAction="http://tempuri.org/IService1/GetVaccineByIdResponse")]
        VaccineApp.MyServiceReference.vaccine GetVaccineById(int vaccineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineById", ReplyAction="http://tempuri.org/IService1/GetVaccineByIdResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine> GetVaccineByIdAsync(int vaccineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVaccine", ReplyAction="http://tempuri.org/IService1/AddVaccineResponse")]
        void AddVaccine(VaccineApp.MyServiceReference.vaccine vaccine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVaccine", ReplyAction="http://tempuri.org/IService1/AddVaccineResponse")]
        System.Threading.Tasks.Task AddVaccineAsync(VaccineApp.MyServiceReference.vaccine vaccine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateVaccine", ReplyAction="http://tempuri.org/IService1/UpdateVaccineResponse")]
        void UpdateVaccine(VaccineApp.MyServiceReference.vaccine vaccine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateVaccine", ReplyAction="http://tempuri.org/IService1/UpdateVaccineResponse")]
        System.Threading.Tasks.Task UpdateVaccineAsync(VaccineApp.MyServiceReference.vaccine vaccine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteVaccine", ReplyAction="http://tempuri.org/IService1/DeleteVaccineResponse")]
        void DeleteVaccine(int vaccineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteVaccine", ReplyAction="http://tempuri.org/IService1/DeleteVaccineResponse")]
        System.Threading.Tasks.Task DeleteVaccineAsync(int vaccineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCommunities", ReplyAction="http://tempuri.org/IService1/GetCommunitiesResponse")]
        VaccineApp.MyServiceReference.community[] GetCommunities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCommunities", ReplyAction="http://tempuri.org/IService1/GetCommunitiesResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.community[]> GetCommunitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCommunityById", ReplyAction="http://tempuri.org/IService1/GetCommunityByIdResponse")]
        VaccineApp.MyServiceReference.community GetCommunityById(int communityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCommunityById", ReplyAction="http://tempuri.org/IService1/GetCommunityByIdResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.community> GetCommunityByIdAsync(int communityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCommunity", ReplyAction="http://tempuri.org/IService1/AddCommunityResponse")]
        void AddCommunity(VaccineApp.MyServiceReference.community community);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCommunity", ReplyAction="http://tempuri.org/IService1/AddCommunityResponse")]
        System.Threading.Tasks.Task AddCommunityAsync(VaccineApp.MyServiceReference.community community);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCommunity", ReplyAction="http://tempuri.org/IService1/UpdateCommunityResponse")]
        void UpdateCommunity(VaccineApp.MyServiceReference.community community);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCommunity", ReplyAction="http://tempuri.org/IService1/UpdateCommunityResponse")]
        System.Threading.Tasks.Task UpdateCommunityAsync(VaccineApp.MyServiceReference.community community);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCommunity", ReplyAction="http://tempuri.org/IService1/DeleteCommunityResponse")]
        void DeleteCommunity(int communityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCommunity", ReplyAction="http://tempuri.org/IService1/DeleteCommunityResponse")]
        System.Threading.Tasks.Task DeleteCommunityAsync(int communityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineRecords", ReplyAction="http://tempuri.org/IService1/GetVaccineRecordsResponse")]
        VaccineApp.MyServiceReference.vaccine_records[] GetVaccineRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineRecords", ReplyAction="http://tempuri.org/IService1/GetVaccineRecordsResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine_records[]> GetVaccineRecordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineRecordById", ReplyAction="http://tempuri.org/IService1/GetVaccineRecordByIdResponse")]
        VaccineApp.MyServiceReference.vaccine_records GetVaccineRecordById(int vaccineRecordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineRecordById", ReplyAction="http://tempuri.org/IService1/GetVaccineRecordByIdResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine_records> GetVaccineRecordByIdAsync(int vaccineRecordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVaccineRecord", ReplyAction="http://tempuri.org/IService1/AddVaccineRecordResponse")]
        void AddVaccineRecord(VaccineApp.MyServiceReference.vaccine_records vaccineRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVaccineRecord", ReplyAction="http://tempuri.org/IService1/AddVaccineRecordResponse")]
        System.Threading.Tasks.Task AddVaccineRecordAsync(VaccineApp.MyServiceReference.vaccine_records vaccineRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateVaccineRecord", ReplyAction="http://tempuri.org/IService1/UpdateVaccineRecordResponse")]
        void UpdateVaccineRecord(VaccineApp.MyServiceReference.vaccine_records vaccineRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateVaccineRecord", ReplyAction="http://tempuri.org/IService1/UpdateVaccineRecordResponse")]
        System.Threading.Tasks.Task UpdateVaccineRecordAsync(VaccineApp.MyServiceReference.vaccine_records vaccineRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteVaccineRecord", ReplyAction="http://tempuri.org/IService1/DeleteVaccineRecordResponse")]
        void DeleteVaccineRecord(int vaccineRecordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteVaccineRecord", ReplyAction="http://tempuri.org/IService1/DeleteVaccineRecordResponse")]
        System.Threading.Tasks.Task DeleteVaccineRecordAsync(int vaccineRecordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineProducers", ReplyAction="http://tempuri.org/IService1/GetVaccineProducersResponse")]
        VaccineApp.MyServiceReference.vaccine_producers[] GetVaccineProducers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineProducers", ReplyAction="http://tempuri.org/IService1/GetVaccineProducersResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine_producers[]> GetVaccineProducersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineProducerById", ReplyAction="http://tempuri.org/IService1/GetVaccineProducerByIdResponse")]
        VaccineApp.MyServiceReference.vaccine_producers GetVaccineProducerById(int vaccineProducerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVaccineProducerById", ReplyAction="http://tempuri.org/IService1/GetVaccineProducerByIdResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine_producers> GetVaccineProducerByIdAsync(int vaccineProducerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVaccineProducer", ReplyAction="http://tempuri.org/IService1/AddVaccineProducerResponse")]
        void AddVaccineProducer(VaccineApp.MyServiceReference.vaccine_producers vaccineProducer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVaccineProducer", ReplyAction="http://tempuri.org/IService1/AddVaccineProducerResponse")]
        System.Threading.Tasks.Task AddVaccineProducerAsync(VaccineApp.MyServiceReference.vaccine_producers vaccineProducer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateVaccineProducer", ReplyAction="http://tempuri.org/IService1/UpdateVaccineProducerResponse")]
        void UpdateVaccineProducer(VaccineApp.MyServiceReference.vaccine_producers vaccineProducer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateVaccineProducer", ReplyAction="http://tempuri.org/IService1/UpdateVaccineProducerResponse")]
        System.Threading.Tasks.Task UpdateVaccineProducerAsync(VaccineApp.MyServiceReference.vaccine_producers vaccineProducer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteVaccineProducer", ReplyAction="http://tempuri.org/IService1/DeleteVaccineProducerResponse")]
        void DeleteVaccineProducer(int vaccineProducerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteVaccineProducer", ReplyAction="http://tempuri.org/IService1/DeleteVaccineProducerResponse")]
        System.Threading.Tasks.Task DeleteVaccineProducerAsync(int vaccineProducerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProducers", ReplyAction="http://tempuri.org/IService1/GetProducersResponse")]
        VaccineApp.MyServiceReference.producer[] GetProducers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProducers", ReplyAction="http://tempuri.org/IService1/GetProducersResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.producer[]> GetProducersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProducerById", ReplyAction="http://tempuri.org/IService1/GetProducerByIdResponse")]
        VaccineApp.MyServiceReference.producer GetProducerById(int producerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProducerById", ReplyAction="http://tempuri.org/IService1/GetProducerByIdResponse")]
        System.Threading.Tasks.Task<VaccineApp.MyServiceReference.producer> GetProducerByIdAsync(int producerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddProducer", ReplyAction="http://tempuri.org/IService1/AddProducerResponse")]
        void AddProducer(VaccineApp.MyServiceReference.producer producer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddProducer", ReplyAction="http://tempuri.org/IService1/AddProducerResponse")]
        System.Threading.Tasks.Task AddProducerAsync(VaccineApp.MyServiceReference.producer producer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateProducer", ReplyAction="http://tempuri.org/IService1/UpdateProducerResponse")]
        void UpdateProducer(VaccineApp.MyServiceReference.producer producer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateProducer", ReplyAction="http://tempuri.org/IService1/UpdateProducerResponse")]
        System.Threading.Tasks.Task UpdateProducerAsync(VaccineApp.MyServiceReference.producer producer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteProducer", ReplyAction="http://tempuri.org/IService1/DeleteProducerResponse")]
        void DeleteProducer(int producerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteProducer", ReplyAction="http://tempuri.org/IService1/DeleteProducerResponse")]
        System.Threading.Tasks.Task DeleteProducerAsync(int producerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : VaccineApp.MyServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<VaccineApp.MyServiceReference.IService1>, VaccineApp.MyServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VaccineApp.MyServiceReference.user Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.user> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public VaccineApp.MyServiceReference.user[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.user[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public VaccineApp.MyServiceReference.user GetUserById(int userId) {
            return base.Channel.GetUserById(userId);
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.user> GetUserByIdAsync(int userId) {
            return base.Channel.GetUserByIdAsync(userId);
        }
        
        public void AddUser(VaccineApp.MyServiceReference.user user) {
            base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(VaccineApp.MyServiceReference.user user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public void UpdateUser(VaccineApp.MyServiceReference.user user) {
            base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(VaccineApp.MyServiceReference.user user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public void DeleteUser(int userId) {
            base.Channel.DeleteUser(userId);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(int userId) {
            return base.Channel.DeleteUserAsync(userId);
        }
        
        public VaccineApp.MyServiceReference.hospital[] GetHospitals() {
            return base.Channel.GetHospitals();
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.hospital[]> GetHospitalsAsync() {
            return base.Channel.GetHospitalsAsync();
        }
        
        public VaccineApp.MyServiceReference.hospital GetHospitalById(int hospitalId) {
            return base.Channel.GetHospitalById(hospitalId);
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.hospital> GetHospitalByIdAsync(int hospitalId) {
            return base.Channel.GetHospitalByIdAsync(hospitalId);
        }
        
        public void AddHospital(VaccineApp.MyServiceReference.hospital hospital) {
            base.Channel.AddHospital(hospital);
        }
        
        public System.Threading.Tasks.Task AddHospitalAsync(VaccineApp.MyServiceReference.hospital hospital) {
            return base.Channel.AddHospitalAsync(hospital);
        }
        
        public void UpdateHospital(VaccineApp.MyServiceReference.hospital hospital) {
            base.Channel.UpdateHospital(hospital);
        }
        
        public System.Threading.Tasks.Task UpdateHospitalAsync(VaccineApp.MyServiceReference.hospital hospital) {
            return base.Channel.UpdateHospitalAsync(hospital);
        }
        
        public void DeleteHospital(int hospitalId) {
            base.Channel.DeleteHospital(hospitalId);
        }
        
        public System.Threading.Tasks.Task DeleteHospitalAsync(int hospitalId) {
            return base.Channel.DeleteHospitalAsync(hospitalId);
        }
        
        public VaccineApp.MyServiceReference.vaccine[] GetVaccines() {
            return base.Channel.GetVaccines();
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine[]> GetVaccinesAsync() {
            return base.Channel.GetVaccinesAsync();
        }
        
        public VaccineApp.MyServiceReference.vaccine GetVaccineById(int vaccineId) {
            return base.Channel.GetVaccineById(vaccineId);
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine> GetVaccineByIdAsync(int vaccineId) {
            return base.Channel.GetVaccineByIdAsync(vaccineId);
        }
        
        public void AddVaccine(VaccineApp.MyServiceReference.vaccine vaccine) {
            base.Channel.AddVaccine(vaccine);
        }
        
        public System.Threading.Tasks.Task AddVaccineAsync(VaccineApp.MyServiceReference.vaccine vaccine) {
            return base.Channel.AddVaccineAsync(vaccine);
        }
        
        public void UpdateVaccine(VaccineApp.MyServiceReference.vaccine vaccine) {
            base.Channel.UpdateVaccine(vaccine);
        }
        
        public System.Threading.Tasks.Task UpdateVaccineAsync(VaccineApp.MyServiceReference.vaccine vaccine) {
            return base.Channel.UpdateVaccineAsync(vaccine);
        }
        
        public void DeleteVaccine(int vaccineId) {
            base.Channel.DeleteVaccine(vaccineId);
        }
        
        public System.Threading.Tasks.Task DeleteVaccineAsync(int vaccineId) {
            return base.Channel.DeleteVaccineAsync(vaccineId);
        }
        
        public VaccineApp.MyServiceReference.community[] GetCommunities() {
            return base.Channel.GetCommunities();
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.community[]> GetCommunitiesAsync() {
            return base.Channel.GetCommunitiesAsync();
        }
        
        public VaccineApp.MyServiceReference.community GetCommunityById(int communityId) {
            return base.Channel.GetCommunityById(communityId);
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.community> GetCommunityByIdAsync(int communityId) {
            return base.Channel.GetCommunityByIdAsync(communityId);
        }
        
        public void AddCommunity(VaccineApp.MyServiceReference.community community) {
            base.Channel.AddCommunity(community);
        }
        
        public System.Threading.Tasks.Task AddCommunityAsync(VaccineApp.MyServiceReference.community community) {
            return base.Channel.AddCommunityAsync(community);
        }
        
        public void UpdateCommunity(VaccineApp.MyServiceReference.community community) {
            base.Channel.UpdateCommunity(community);
        }
        
        public System.Threading.Tasks.Task UpdateCommunityAsync(VaccineApp.MyServiceReference.community community) {
            return base.Channel.UpdateCommunityAsync(community);
        }
        
        public void DeleteCommunity(int communityId) {
            base.Channel.DeleteCommunity(communityId);
        }
        
        public System.Threading.Tasks.Task DeleteCommunityAsync(int communityId) {
            return base.Channel.DeleteCommunityAsync(communityId);
        }
        
        public VaccineApp.MyServiceReference.vaccine_records[] GetVaccineRecords() {
            return base.Channel.GetVaccineRecords();
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine_records[]> GetVaccineRecordsAsync() {
            return base.Channel.GetVaccineRecordsAsync();
        }
        
        public VaccineApp.MyServiceReference.vaccine_records GetVaccineRecordById(int vaccineRecordId) {
            return base.Channel.GetVaccineRecordById(vaccineRecordId);
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine_records> GetVaccineRecordByIdAsync(int vaccineRecordId) {
            return base.Channel.GetVaccineRecordByIdAsync(vaccineRecordId);
        }
        
        public void AddVaccineRecord(VaccineApp.MyServiceReference.vaccine_records vaccineRecord) {
            base.Channel.AddVaccineRecord(vaccineRecord);
        }
        
        public System.Threading.Tasks.Task AddVaccineRecordAsync(VaccineApp.MyServiceReference.vaccine_records vaccineRecord) {
            return base.Channel.AddVaccineRecordAsync(vaccineRecord);
        }
        
        public void UpdateVaccineRecord(VaccineApp.MyServiceReference.vaccine_records vaccineRecord) {
            base.Channel.UpdateVaccineRecord(vaccineRecord);
        }
        
        public System.Threading.Tasks.Task UpdateVaccineRecordAsync(VaccineApp.MyServiceReference.vaccine_records vaccineRecord) {
            return base.Channel.UpdateVaccineRecordAsync(vaccineRecord);
        }
        
        public void DeleteVaccineRecord(int vaccineRecordId) {
            base.Channel.DeleteVaccineRecord(vaccineRecordId);
        }
        
        public System.Threading.Tasks.Task DeleteVaccineRecordAsync(int vaccineRecordId) {
            return base.Channel.DeleteVaccineRecordAsync(vaccineRecordId);
        }
        
        public VaccineApp.MyServiceReference.vaccine_producers[] GetVaccineProducers() {
            return base.Channel.GetVaccineProducers();
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine_producers[]> GetVaccineProducersAsync() {
            return base.Channel.GetVaccineProducersAsync();
        }
        
        public VaccineApp.MyServiceReference.vaccine_producers GetVaccineProducerById(int vaccineProducerId) {
            return base.Channel.GetVaccineProducerById(vaccineProducerId);
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.vaccine_producers> GetVaccineProducerByIdAsync(int vaccineProducerId) {
            return base.Channel.GetVaccineProducerByIdAsync(vaccineProducerId);
        }
        
        public void AddVaccineProducer(VaccineApp.MyServiceReference.vaccine_producers vaccineProducer) {
            base.Channel.AddVaccineProducer(vaccineProducer);
        }
        
        public System.Threading.Tasks.Task AddVaccineProducerAsync(VaccineApp.MyServiceReference.vaccine_producers vaccineProducer) {
            return base.Channel.AddVaccineProducerAsync(vaccineProducer);
        }
        
        public void UpdateVaccineProducer(VaccineApp.MyServiceReference.vaccine_producers vaccineProducer) {
            base.Channel.UpdateVaccineProducer(vaccineProducer);
        }
        
        public System.Threading.Tasks.Task UpdateVaccineProducerAsync(VaccineApp.MyServiceReference.vaccine_producers vaccineProducer) {
            return base.Channel.UpdateVaccineProducerAsync(vaccineProducer);
        }
        
        public void DeleteVaccineProducer(int vaccineProducerId) {
            base.Channel.DeleteVaccineProducer(vaccineProducerId);
        }
        
        public System.Threading.Tasks.Task DeleteVaccineProducerAsync(int vaccineProducerId) {
            return base.Channel.DeleteVaccineProducerAsync(vaccineProducerId);
        }
        
        public VaccineApp.MyServiceReference.producer[] GetProducers() {
            return base.Channel.GetProducers();
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.producer[]> GetProducersAsync() {
            return base.Channel.GetProducersAsync();
        }
        
        public VaccineApp.MyServiceReference.producer GetProducerById(int producerId) {
            return base.Channel.GetProducerById(producerId);
        }
        
        public System.Threading.Tasks.Task<VaccineApp.MyServiceReference.producer> GetProducerByIdAsync(int producerId) {
            return base.Channel.GetProducerByIdAsync(producerId);
        }
        
        public void AddProducer(VaccineApp.MyServiceReference.producer producer) {
            base.Channel.AddProducer(producer);
        }
        
        public System.Threading.Tasks.Task AddProducerAsync(VaccineApp.MyServiceReference.producer producer) {
            return base.Channel.AddProducerAsync(producer);
        }
        
        public void UpdateProducer(VaccineApp.MyServiceReference.producer producer) {
            base.Channel.UpdateProducer(producer);
        }
        
        public System.Threading.Tasks.Task UpdateProducerAsync(VaccineApp.MyServiceReference.producer producer) {
            return base.Channel.UpdateProducerAsync(producer);
        }
        
        public void DeleteProducer(int producerId) {
            base.Channel.DeleteProducer(producerId);
        }
        
        public System.Threading.Tasks.Task DeleteProducerAsync(int producerId) {
            return base.Channel.DeleteProducerAsync(producerId);
        }
    }
}
